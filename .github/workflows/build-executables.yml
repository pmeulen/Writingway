# Build executables using pyinstaller
# Script based on https://github.com/NotCookey/Pyinstaller-Github-Actions

name: Build Executables

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
         - macos-latest                  
         # - ubuntu-latest
         # - windows-latest

    env:
      MAIN_PY_FILE: 'main.py'  # path to main.py file

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
      # Install macports to build a universal version of portaudio
    - name: Setup MacPorts (macOS)
      uses: melusina-org/setup-macports@v1
      with:
        parameters: '.github/parameters/setup-macports.yaml'      
      continue-on-error: true  # Allow the workflow to continue even if this fails

    - name: Display MacPorts build log on failure
      if: failure()  # Only run if the previous step failed
      run: |
        echo "=== MacPorts build log ==="
        if [ -f "/opt/local/var/macports/logs/_opt_local_var_macports_sources_rsync.macports.org_macports_release_tarballs_ports_audio_portaudio/portaudio/main.log" ]; then
          cat "/opt/local/var/macports/logs/_opt_local_var_macports_sources_rsync.macports.org_macports_release_tarballs_ports_audio_portaudio/portaudio/main.log"
        else
          echo "Log file not found, listing available logs:"
          find /opt/local/var/macports/logs -name "*.log" -type f 2>/dev/null || echo "No log files found"
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v5
      # Python version is read from .python-version
      # with:
      #  python-version: 3.11.x

    - name: Install Python dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pip install -r requirements.txt
      working-directory: ./

    - name: Install Python dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip install -r requirements.txt
      working-directory: ./   

    - name: Install Python dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install everything except native packages that need universal2
        pip install -r <(grep -v pyaudio requirements.txt)

        # Enable universal builds
        export ARCHFLAGS="-arch arm64 -arch x86_64"

        # Add macports includes
        export CPPFLAGS="-I/opt/local/include"
        export LDFLAGS="-L/opt/local/lib"

        # Build native packages that need universal2
        pip install --no-binary=pyaudio pyaudio
      working-directory: ./    

    - name: Install PyInstaller
      run: |
        pip install pyinstaller
      working-directory: ./

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller ${{ env.MAIN_PY_FILE }}
      working-directory: ./
       
    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller ${{ env.MAIN_PY_FILE }}
      working-directory: ./

    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller \
          --target-arch=universal2 \
          --hidden-import=pyaudio \
          --collect-all=pyaudio \
          ${{ env.MAIN_PY_FILE }}
      working-directory: ./

    - name: Create Artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-executables
        path: dist/

    - name: Create Artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-executables
        path: dist/

    - name: Create Artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-executables
        path: dist/

    - name: List files in dist folder
      run: ls -R ./dist/
